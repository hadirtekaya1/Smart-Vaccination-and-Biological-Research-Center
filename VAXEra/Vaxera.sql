-- Create the PATIENTS table
CREATE TABLE PATIENTS (
    PATIENT_ID NUMBER PRIMARY KEY,
    FIRST_NAME VARCHAR2(50) NOT NULL,
    LAST_NAME VARCHAR2(50) NOT NULL,
    GENDER CHAR(1) CHECK (GENDER IN ('M', 'F')),
    DATE_OF_BIRTH DATE NOT NULL,
    ADDRESS VARCHAR2(255),
    EMAIL VARCHAR2(100) UNIQUE,
    PHONE_NUMBER VARCHAR2(20),
    PASSWORD VARCHAR2(255),
    QR_CODE BLOB
);

CREATE SEQUENCE SEQ_PATIENT_ID START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER TRG_PATIENTS_ID
BEFORE INSERT ON PATIENTS
FOR EACH ROW
WHEN (NEW.PATIENT_ID IS NULL)
BEGIN
    SELECT SEQ_PATIENT_ID.NEXTVAL INTO :NEW.PATIENT_ID FROM dual;
END;
/

-- Create the PERSONNEL table
CREATE TABLE PERSONNEL (
    PERSONNEL_ID NUMBER PRIMARY KEY,
    FIRST_NAME VARCHAR2(50) NOT NULL,
    LAST_NAME VARCHAR2(50) NOT NULL,
    CERTIFICATION VARCHAR2(100),
    CONTACT VARCHAR2(100),
    AFFECTATION VARCHAR2(100),
    SPECIALITY VARCHAR2(100)
);

CREATE SEQUENCE SEQ_PERSONNEL_ID START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER TRG_PERSONNEL_ID
BEFORE INSERT ON PERSONNEL
FOR EACH ROW
WHEN (NEW.PERSONNEL_ID IS NULL)
BEGIN
    SELECT SEQ_PERSONNEL_ID.NEXTVAL INTO :NEW.PERSONNEL_ID FROM dual;
END;
/

-- Create the VACCINE table
CREATE TABLE VACCINE (
    ID_VACCINE NUMBER PRIMARY KEY,
    VACCINE_NAME VARCHAR2(100) NOT NULL,
    TYPE VARCHAR2(100) NOT NULL,
    MANUFACTURING_DATE DATE NOT NULL,
    EXPIRATION_DATE DATE NOT NULL,
    BATCH_NUMBER VARCHAR2(100) NOT NULL,
    SUPPLIER VARCHAR2(100) NOT NULL,
    STOCK_QUANTITY NUMBER NOT NULL
);

CREATE SEQUENCE SEQ_VACCINE_ID START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER TRG_VACCINE_ID
BEFORE INSERT ON VACCINE
FOR EACH ROW
WHEN (NEW.ID_VACCINE IS NULL)
BEGIN
    SELECT SEQ_VACCINE_ID.NEXTVAL INTO :NEW.ID_VACCINE FROM dual;
END;
/

-- Create the ALERTS table
CREATE TABLE ALERTS (
    ID NUMBER PRIMARY KEY,
    TEMPERATURE NUMBER,
    ALERT_MESSAGE VARCHAR2(255),
    ALERT_TIME TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE SEQUENCE SEQ_ALERTS_ID START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER TRG_ALERTS_ID
BEFORE INSERT ON ALERTS
FOR EACH ROW
WHEN (NEW.ID IS NULL)
BEGIN
    SELECT SEQ_ALERTS_ID.NEXTVAL INTO :NEW.ID FROM dual;
END;
/

-- Create the APPOINTMENTS table
CREATE TABLE APPOINTMENTS (
    ID NUMBER PRIMARY KEY,
    PATIENT_ID NUMBER,
    APPOINTMENT_DATE DATE,
    APPOINTMENT_TIME VARCHAR2(10),
    PURPOSE VARCHAR2(100),
    STATUS VARCHAR2(20),
    NOTES VARCHAR2(500),
    CONSTRAINT FK_PATIENT
        FOREIGN KEY (PATIENT_ID)
        REFERENCES PATIENTS(PATIENT_ID)
        ON DELETE CASCADE
);

CREATE SEQUENCE SEQ_APPOINTMENTS_ID START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER TRG_APPOINTMENTS_ID
BEFORE INSERT ON APPOINTMENTS
FOR EACH ROW
WHEN (NEW.ID IS NULL)
BEGIN
    SELECT SEQ_APPOINTMENTS_ID.NEXTVAL INTO :NEW.ID FROM dual;
END;
/

-- Create the EXPERIMENTS table
CREATE TABLE EXPERIMENTS (
    EXPERIMENT_ID NUMBER PRIMARY KEY,
    NAME VARCHAR2(100) NOT NULL,
    DESCRIPTION CLOB,
    PROTOCOL CLOB,
    STATUS VARCHAR2(30) CHECK (STATUS IN ('Planned', 'In Progress', 'Completed', 'Analyzed', 'Reported')),
    START_DATE DATE,
    END_DATE DATE,
    RESULTS_OBTAINED VARCHAR2(20),
    RESPONSIBLE_NAME VARCHAR2(100)
);

CREATE SEQUENCE SEQ_EXPERIMENTS_ID START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER TRG_EXPERIMENTS_ID
BEFORE INSERT ON EXPERIMENTS
FOR EACH ROW
WHEN (NEW.EXPERIMENT_ID IS NULL)
BEGIN
    SELECT SEQ_EXPERIMENTS_ID.NEXTVAL INTO :NEW.EXPERIMENT_ID FROM dual;
END;
/
